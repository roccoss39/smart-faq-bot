# ZASTƒÑP ca≈Çy test_ai_general.py:

"""
üß™ OBSZERNE TESTY INTELIGENTNEGO SYSTEMU BOTA
Testuje wszystkie funkcjonalno≈õci process_user_message_smart
"""

# üîß IMPORTY:
from bot_logic_ai import (
    analyze_user_intent_ai_robust, 
    process_user_message_smart, 
    get_user_stats, 
    clean_thinking_response_enhanced,
    user_conversations,
    user_sessions
)
import time

def test_cancellation_systems():
    """Por√≥wnanie starego i nowego systemu"""
    print("üß™ POR√ìWNANIE SYSTEM√ìW - ANULOWANIE WIZYTY")
    print("="*60)
    
    # === OBECNY SYSTEM (skomplikowany) ===
    print("\n‚ùå OBECNY SYSTEM (sesje + AI):")
    print("üë§ User: chcƒô anulowaƒá wizytƒô")
    intent1 = analyze_user_intent_ai_robust("chcƒô anulowaƒá wizytƒô")
    print(f"üîç AI Intent: {intent1}")
    print("üóÉÔ∏è Sesja: state = 'cancelling'")
    
    print("üë§ User: Jan Kowalski 123456789 wtorek 10:00")
    intent2 = analyze_user_intent_ai_robust("Jan Kowalski 123456789 wtorek 10:00")
    print(f"üîç AI Intent: {intent2}")
    print("üß† Backend: sprawdza sesjƒô + intent ‚Üí anulowanie")
    
    # === NOWY SYSTEM (tylko AI) ===
    print("\n‚úÖ NOWY SYSTEM (tylko AI z pamiƒôciƒÖ):")
    print("üë§ User: chcƒô anulowaƒá wizytƒô")
    
    try:
        response1 = process_user_message_smart("chcƒô anulowaƒá wizytƒô", "test_user_cancel")
        print(f"ü§ñ AI: {response1}")
        
        print("üë§ User: Jan Kowalski 123456789 wtorek 10:00")
        response2 = process_user_message_smart("Jan Kowalski 123456789 wtorek 10:00", "test_user_cancel")
        print(f"ü§ñ AI: {response2}")
        
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD: {e}")

def test_booking_complete_flow():
    """Test kompletnego procesu rezerwacji"""
    print("\nüß™ TEST KOMPLETNEGO PROCESU REZERWACJI")
    print("="*50)
    
    user_id = "booking_test_user"
    
    # Krok 1: Inicjacja
    print("üìÖ KROK 1: Inicjacja rezerwacji")
    print("üë§ User: Cze≈õƒá, chcƒô siƒô um√≥wiƒá na wizytƒô")
    r1 = process_user_message_smart("Cze≈õƒá, chcƒô siƒô um√≥wiƒá na wizytƒô", user_id)
    print(f"ü§ñ AI: {r1}")
    print("-" * 30)
    
    # Krok 2: Podanie terminu i us≈Çugi
    print("üìÖ KROK 2: Podanie terminu i us≈Çugi")
    print("üë§ User: piƒÖtek 11:00 farbowanie")
    r2 = process_user_message_smart("piƒÖtek 11:00 farbowanie", user_id)
    print(f"ü§ñ AI: {r2}")
    print("-" * 30)
    
    # Krok 3: Podanie danych kontaktowych
    print("üìÖ KROK 3: Podanie danych kontaktowych")
    print("üë§ User: Katarzyna Nowak 555-123-456")
    r3 = process_user_message_smart("Katarzyna Nowak 555-123-456", user_id)
    print(f"ü§ñ AI: {r3}")
    print("-" * 30)
    
    # Sprawd≈∫ czy zawiera potwierdzenie
    if "‚úÖ REZERWACJA POTWIERDZONA:" in r3:
        print("‚úÖ SUKCES: Rezerwacja zosta≈Ça potwierdzona!")
    else:
        print("‚ùå B≈ÅƒÑD: Brak potwierdzenia rezerwacji")

def test_cancellation_complete_flow():
    """Test kompletnego procesu anulowania"""
    print("\nüß™ TEST KOMPLETNEGO PROCESU ANULOWANIA")
    print("="*50)
    
    user_id = "cancel_test_user"
    
    # Krok 1: ≈ªƒÖdanie anulowania
    print("‚ùå KROK 1: ≈ªƒÖdanie anulowania")
    print("üë§ User: Chcƒô anulowaƒá swojƒÖ wizytƒô")
    r1 = process_user_message_smart("Chcƒô anulowaƒá swojƒÖ wizytƒô", user_id)
    print(f"ü§ñ AI: {r1}")
    print("-" * 30)
    
    # Krok 2: Podanie danych do anulowania
    print("‚ùå KROK 2: Podanie danych do anulowania")
    print("üë§ User: Marek Kowal 666-999-333 ≈õroda 13:00")
    r2 = process_user_message_smart("Marek Kowal 666-999-333 ≈õroda 13:00", user_id)
    print(f"ü§ñ AI: {r2}")
    print("-" * 30)
    
    # Sprawd≈∫ czy zawiera potwierdzenie anulowania
    if "‚ùå ANULACJA POTWIERDZONA:" in r2:
        print("‚úÖ SUKCES: Anulowanie zosta≈Ço potwierdzone!")
    else:
        print("‚ùå B≈ÅƒÑD: Brak potwierdzenia anulowania")

def test_memory_and_context():
    """Test pamiƒôci i kontekstu AI"""
    print("\nüß™ TEST PAMIƒòCI I KONTEKSTU")
    print("="*40)
    
    user_id = "memory_test_user"
    
    # Test 1: Przedstawienie siƒô
    print("üß† TEST 1: Przedstawienie siƒô")
    print("üë§ User: Cze≈õƒá, nazywam siƒô Aleksandra")
    r1 = process_user_message_smart("Cze≈õƒá, nazywam siƒô Aleksandra", user_id)
    print(f"ü§ñ AI: {r1}")
    print("-" * 20)
    
    # Test 2: Sprawdzenie pamiƒôci imienia
    print("üß† TEST 2: Sprawdzenie pamiƒôci imienia")
    print("üë§ User: Jak mam na imiƒô?")
    r2 = process_user_message_smart("Jak mam na imiƒô?", user_id)
    print(f"ü§ñ AI: {r2}")
    
    if "Aleksandra" in r2:
        print("‚úÖ SUKCES: AI pamiƒôta imiƒô!")
    else:
        print("‚ùå B≈ÅƒÑD: AI nie pamiƒôta imienia")
    print("-" * 20)
    
    # Test 3: Kontekst rezerwacji
    print("üß† TEST 3: Kontekst w trakcie rezerwacji")
    print("üë§ User: Chcƒô siƒô um√≥wiƒá")
    r3 = process_user_message_smart("Chcƒô siƒô um√≥wiƒá", user_id)
    print(f"ü§ñ AI: {r3}")
    
    print("üë§ User: sobota 10:00")
    r4 = process_user_message_smart("sobota 10:00", user_id)
    print(f"ü§ñ AI: {r4}")
    
    print("üë§ User: stylizacja")
    r5 = process_user_message_smart("stylizacja", user_id)
    print(f"ü§ñ AI: {r5}")
    print("-" * 20)
    
    # Test 4: U≈ºycie imienia w kontek≈õcie
    print("üß† TEST 4: U≈ºycie imienia w dalszej rozmowie")
    print("üë§ User: Dziƒôkujƒô za pomoc")
    r6 = process_user_message_smart("Dziƒôkujƒô za pomoc", user_id)
    print(f"ü§ñ AI: {r6}")
    
    if "Aleksandra" in r6:
        print("‚úÖ SUKCES: AI u≈ºywa imienia w kontek≈õcie!")
    else:
        print("‚ö†Ô∏è INFO: AI nie u≈ºy≈Ço imienia (mo≈ºe byƒá OK)")

def test_user_isolation():
    """Test izolacji r√≥≈ºnych u≈ºytkownik√≥w"""
    print("\nüß™ TEST IZOLACJI U≈ªYTKOWNIK√ìW")
    print("="*40)
    
    # U≈ºytkownik 1
    print("üë§ USER 1: Nazywam siƒô Anna, chcƒô siƒô um√≥wiƒá na wtorek")
    r1 = process_user_message_smart("Nazywam siƒô Anna, chcƒô siƒô um√≥wiƒá na wtorek", "user_1")
    print(f"ü§ñ ‚Üí User1: {r1[:80]}...")
    
    # U≈ºytkownik 2  
    print("üë§ USER 2: Jestem Jan, potrzebujƒô wizyty w czwartek")
    r2 = process_user_message_smart("Jestem Jan, potrzebujƒô wizyty w czwartek", "user_2")
    print(f"ü§ñ ‚Üí User2: {r2[:80]}...")
    
    # Sprawdzenie izolacji - User 1
    print("üë§ USER 1: Jak mam na imiƒô?")
    r3 = process_user_message_smart("Jak mam na imiƒô?", "user_1")
    print(f"ü§ñ ‚Üí User1: {r3}")
    
    # Sprawdzenie izolacji - User 2
    print("üë§ USER 2: Jak mam na imiƒô?")
    r4 = process_user_message_smart("Jak mam na imiƒô?", "user_2")
    print(f"ü§ñ ‚Üí User2: {r4}")
    
    # Weryfikacja
    if "Anna" in r3 and "Jan" in r4:
        print("‚úÖ SUKCES: Izolacja u≈ºytkownik√≥w dzia≈Ça!")
    else:
        print("‚ùå B≈ÅƒÑD: Problem z izolacjƒÖ u≈ºytkownik√≥w")

def test_edge_cases():
    """Test przypadk√≥w brzegowych"""
    print("\nüß™ TEST PRZYPADK√ìW BRZEGOWYCH")
    print("="*40)
    
    user_id = "edge_case_user"
    
    # Test 1: Pusta wiadomo≈õƒá
    print("üîç TEST 1: Reakcja na r√≥≈ºne typy wiadomo≈õci")
    test_messages = [
        "",  # Pusta
        "   ",  # Same spacje
        "ü§î",  # Samo emoji
        "123456789",  # Same cyfry
        "ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º",  # Polskie znaki
        "Co?",  # Bardzo kr√≥tka
        "Bardzo d≈Çuga wiadomo≈õƒá " * 20,  # Bardzo d≈Çuga
    ]
    
    for i, msg in enumerate(test_messages, 1):
        print(f"   {i}. Wiadomo≈õƒá: '{msg[:30]}{'...' if len(msg) > 30 else ''}'")
        try:
            response = process_user_message_smart(msg, f"{user_id}_{i}")
            print(f"      Odpowied≈∫: {response[:50]}{'...' if len(response) > 50 else ''}")
        except Exception as e:
            print(f"      ‚ùå B≈ÇƒÖd: {e}")
        print()

def test_services_and_pricing():
    """Test pyta≈Ñ o us≈Çugi i ceny"""
    print("\nüß™ TEST PYTA≈É O US≈ÅUGI I CENY")
    print("="*40)
    
    user_id = "services_test_user"
    
    questions = [
        "Jakie us≈Çugi oferujecie?",
        "Ile kosztuje strzy≈ºenie?",
        "Czy robicie farbowanie?",
        "Jakie sƒÖ godziny otwarcia?",
        "Czy pracujecie w niedziele?",
        "Ile trwa stylizacja?",
        "Czy potrzeba um√≥wiƒá wizytƒô?",
    ]
    
    for i, question in enumerate(questions, 1):
        print(f"‚ùì PYTANIE {i}: {question}")
        response = process_user_message_smart(question, f"{user_id}_{i}")
        print(f"ü§ñ ODPOWIED≈π: {response}")
        print("-" * 30)

def test_cleaning_function_extended():
    """Rozszerzony test funkcji czyszczenia"""
    print("\nüß™ TEST FUNKCJI CZYSZCZENIA - ROZSZERZONY")
    print("="*50)
    
    test_cases = [
        # Podstawowe przypadki
        "<think>Analyzing...</think>Cze≈õƒá! Jak mogƒô pom√≥c?",
        "BOOKING",
        "CONTACT_DATA - to jest kategoria", 
        
        # Przypadki z rzeczywistymi odpowiedziami
        "<think>Let me think</think>‚úÖ REZERWACJA POTWIERDZONA: Anna Kowalska, wtorek 15:00, Strzy≈ºenie, tel: 987654321",
        "<thinking>This is thinking</thinking>‚ùå ANULACJA POTWIERDZONA: Jan Kowalski, ≈õroda 14:00, tel: 123456789",
        
        # Mieszane przypadki
        "OTHER_QUESTION\n\nCze≈õƒá! W czym mogƒô pom√≥c?",
        "Oczywi≈õcie! Proszƒô podaƒá swoje dane.",
        "WANT_APPOINTMENT Super! Jaki termin Ci odpowiada?",
        
        # Przypadki brzegowe
        "<think>Complex thinking process with multiple lines\nand reasoning steps</think>Finalna odpowied≈∫",
        "ASK_AVAILABILITY\nBOOKING\nCONTACT_DATA\nFaktyczna odpowied≈∫ na ko≈Ñcu",
        "<think>Nested <think>thinking</think> blocks</think>Czysta odpowied≈∫",
        
        # Tylko kategorie (powinny zostaƒá zastƒÖpione)
        "CANCEL_VISIT",
        "OTHER_QUESTION",
        "   BOOKING   ",
    ]
    
    print("üßπ SZCZEG√ì≈ÅOWY TEST CZYSZCZENIA:")
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n{i:2d}. PRZED: {test}")
        cleaned = clean_thinking_response_enhanced(test)
        print(f"    PO:    {cleaned}")
        
        # Sprawd≈∫ jako≈õƒá czyszczenia
        if "<think" in cleaned or "<thinking" in cleaned:
            print("    ‚ùå B≈ÅƒÑD: Pozosta≈Çy tagi <think>")
        elif cleaned in ["BOOKING", "CONTACT_DATA", "OTHER_QUESTION", "ASK_AVAILABILITY", "WANT_APPOINTMENT", "CANCEL_VISIT"]:
            print("    ‚ö†Ô∏è KATEGORIA: Zamieniono na domy≈õlnƒÖ odpowied≈∫")
        elif len(cleaned) < 5:
            print("    ‚ö†Ô∏è KR√ìTKA: Bardzo kr√≥tka odpowied≈∫")
        else:
            print("    ‚úÖ OK: Poprawnie oczyszczona")
        
        print("-" * 40)

def test_performance_and_stats():
    """Test wydajno≈õci i statystyk"""
    print("\nüß™ TEST WYDAJNO≈öCI I STATYSTYK")
    print("="*40)
    
    print("üìä STATYSTYKI PRZED TESTAMI:")
    stats_before = get_user_stats()
    print(f"   Sesje: {stats_before['total_sessions']}")
    print(f"   Rozmowy: {stats_before['conversations_total']}")
    print(f"   Aktywni ostatnio: {stats_before['active_last_hour']}")
    
    # Test wydajno≈õci - wiele szybkich zapyta≈Ñ
    print("\n‚ö° TEST WYDAJNO≈öCI - 10 szybkich zapyta≈Ñ:")
    start_time = time.time()
    
    for i in range(10):
        response = process_user_message_smart(f"Testowa wiadomo≈õƒá {i+1}", f"perf_user_{i}")
        print(f"   {i+1}. Odpowied≈∫: {len(response)} znak√≥w")
    
    end_time = time.time()
    print(f"‚è±Ô∏è Czas wykonania: {end_time - start_time:.2f} sekund")
    print(f"‚ö° ≈öredni czas na zapytanie: {(end_time - start_time)/10:.2f} sekund")
    
    print("\nüìä STATYSTYKI PO TESTACH:")
    stats_after = get_user_stats()
    print(f"   Sesje: {stats_after['total_sessions']}")
    print(f"   Rozmowy: {stats_after['conversations_total']}")
    print(f"   Aktywni ostatnio: {stats_after['active_last_hour']}")
    
    print(f"\nüìà PRZYROST:")
    print(f"   Nowe rozmowy: +{stats_after['conversations_total'] - stats_before['conversations_total']}")

def run_all_tests():
    """Uruchom wszystkie testy"""
    print("üöÄ URUCHAMIANIE WSZYSTKICH TEST√ìW")
    print("="*60)
    
    tests = [
        ("Por√≥wnanie system√≥w", test_cancellation_systems),
        ("Kompletna rezerwacja", test_booking_complete_flow),
        ("Kompletne anulowanie", test_cancellation_complete_flow),
        ("Pamiƒôƒá i kontekst", test_memory_and_context),
        ("Izolacja u≈ºytkownik√≥w", test_user_isolation),
        ("Przypadki brzegowe", test_edge_cases),
        ("Us≈Çugi i ceny", test_services_and_pricing),
        ("Funkcja czyszczenia", test_cleaning_function_extended),
        ("Wydajno≈õƒá i statystyki", test_performance_and_stats),
    ]
    
    for test_name, test_function in tests:
        print(f"\n{'='*60}")
        print(f"üß™ {test_name.upper()}")
        print('='*60)
        
        try:
            test_function()
            print(f"‚úÖ Test '{test_name}' zako≈Ñczony")
        except Exception as e:
            print(f"‚ùå Test '{test_name}' nie powi√≥d≈Ç siƒô: {e}")
        
        time.sleep(0.5)  # Kr√≥tka pauza miƒôdzy testami

# Funkcje z poprzednich wersji (zachowane dla kompatybilno≈õci)
def test_advanced_scenarios():
    """Podstawowe scenariusze (zachowane)"""
    test_booking_complete_flow()
    test_memory_and_context()

def test_smart_with_existing_calendar():
    """Test z kalendarzem (zachowany)"""
    test_booking_complete_flow()
    test_cancellation_complete_flow()

def test_cleaning_function():
    """Podstawowy test czyszczenia (zachowany)"""
    test_cleaning_function_extended()

# MAIN - wyb√≥r test√≥w
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        test_name = sys.argv[1].lower()
        
        if test_name == "all":
            run_all_tests()
        def test_intent_classification_accuracy():
            """Test dok≈Çadno≈õci klasyfikacji intencji AI"""
            print("\nüß™ TEST DOK≈ÅADNO≈öCI KLASYFIKACJI INTENCJI")
            print("="*50)
            
            test_cases = [
                # CONTACT_DATA cases
                ("Jan Kowalski 123456789", "CONTACT_DATA"),
                ("Anna Nowak, tel. 555666777", "CONTACT_DATA"),
                ("Piotr Wi≈õniewski, numer: 111222333", "CONTACT_DATA"),
                
                # BOOKING cases  
                ("poniedzia≈Çek 10:00", "BOOKING"),
                ("wtorek 11:30 strzy≈ºenie", "BOOKING"),
                ("≈õroda 15:00", "BOOKING"),
                
                # CANCEL_VISIT cases
                ("chcƒô anulowaƒá wizytƒô", "CANCEL_VISIT"),
                ("odwo≈Çaj termin", "CANCEL_VISIT"),
                ("rezygnujƒô z wizyty", "CANCEL_VISIT"),
                
                # ASK_AVAILABILITY cases
                ("wolne terminy?", "ASK_AVAILABILITY"),
                ("dostƒôpne godziny w piƒÖtek?", "ASK_AVAILABILITY"),
                ("kiedy mo≈ºna siƒô um√≥wiƒá?", "ASK_AVAILABILITY"),
                
                # WANT_APPOINTMENT cases
                ("chcƒô siƒô um√≥wiƒá", "WANT_APPOINTMENT"),
                ("potrzebujƒô wizyty", "WANT_APPOINTMENT"),
                ("um√≥w mnie", "WANT_APPOINTMENT"),
            ]
            
            correct = 0
            total = len(test_cases)
            
            for message, expected_intent in test_cases:
                actual_intent = analyze_user_intent_ai_robust(message)
                is_correct = actual_intent == expected_intent
                
                print(f"üìù '{message}' ‚Üí {actual_intent} {'‚úÖ' if is_correct else '‚ùå'}")
                if not is_correct:
                    print(f"   Oczekiwano: {expected_intent}")
                
                if is_correct:
                    correct += 1
            
            accuracy = (correct / total) * 100
            print(f"\nüìä DOK≈ÅADNO≈öƒÜ: {correct}/{total} ({accuracy:.1f}%)")
            
            if accuracy >= 85:
                print("‚úÖ SUKCES: Wysoka dok≈Çadno≈õƒá klasyfikacji!")
            elif accuracy >= 70:
                print("‚ö†Ô∏è UWAGA: ≈örednia dok≈Çadno≈õƒá, mo≈ºe wymagaƒá poprawy")
            else:
                print("‚ùå B≈ÅƒÑD: Niska dok≈Çadno≈õƒá, wymaga natychmiastowej poprawy")

        def test_conversation_flow_variations():
            """Test r√≥≈ºnych wariant√≥w przep≈Çywu rozmowy"""
            print("\nüß™ TEST WARIANT√ìW PRZEP≈ÅYWU ROZMOWY")
            print("="*50)
            
            # Wariant 1: Wszystko w jednej wiadomo≈õci
            print("üîÑ WARIANT 1: Wszystko naraz")
            user_id = "flow_test_1"
            response = process_user_message_smart("Jan Kowalski 123456789 piƒÖtek 14:00 strzy≈ºenie", user_id)
            print(f"üë§ User: Jan Kowalski 123456789 piƒÖtek 14:00 strzy≈ºenie")
            print(f"ü§ñ AI: {response}")
            
            if "REZERWACJA POTWIERDZONA" in response:
                print("‚úÖ SUKCES: Pe≈Çna rezerwacja w jednej wiadomo≈õci")
            else:
                print("‚ùå B≈ÅƒÑD: Nie rozpoznano pe≈Çnej rezerwacji")
            print("-" * 30)
            
            # Wariant 2: Odwr√≥cona kolejno≈õƒá (najpierw dane, potem termin)
            print("üîÑ WARIANT 2: Najpierw dane, potem termin")
            user_id = "flow_test_2"
            r1 = process_user_message_smart("chcƒô siƒô um√≥wiƒá", user_id)
            r2 = process_user_message_smart("Maria Kowalczyk 987654321", user_id)
            r3 = process_user_message_smart("czwartek 16:00", user_id)
            
            print(f"ü§ñ Step 1: {r1[:50]}...")
            print(f"ü§ñ Step 2: {r2[:50]}...")
            print(f"ü§ñ Step 3: {r3[:50]}...")
            
            if "REZERWACJA POTWIERDZONA" in r3:
                print("‚úÖ SUKCES: Rezerwacja w odwr√≥conej kolejno≈õci")
            else:
                print("‚ùå B≈ÅƒÑD: Nie zadzia≈Ça≈Ça odwr√≥cona kolejno≈õƒá")
            print("-" * 30)
            
            # Wariant 3: Z przerwami i dodatkowymi pytaniami
            print("üîÑ WARIANT 3: Z przerwami")
            user_id = "flow_test_3"
            responses = []
            messages = [
                "cze≈õƒá",
                "chcƒô siƒô um√≥wiƒá", 
                "ile kosztuje strzy≈ºenie?",
                "ok, wtorek 10:00",
                "Tomasz Nowak 555444333"
            ]
            
            for msg in messages:
                response = process_user_message_smart(msg, user_id)
                responses.append(response)
                print(f"üë§ {msg} ‚Üí ü§ñ {response[:40]}...")
            
            final_response = responses[-1]
            if "REZERWACJA POTWIERDZONA" in final_response:
                print("‚úÖ SUKCES: Rezerwacja z przerwami")
            else:
                print("‚ùå B≈ÅƒÑD: Nie zadzia≈Ça≈Ça rezerwacja z przerwami")

        def test_error_handling_and_recovery():