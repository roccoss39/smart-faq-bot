"""
ü§ñ INTERAKTYWNY CHAT Z TOGETHER AI
Test pamiƒôci kontekstu i jako≈õci odpowiedzi
"""

from together import Together
import os
from datetime import datetime

def main():
    print("ü§ñ INTERAKTYWNY CHAT Z TOGETHER AI")
    print("="*60)
    print("üí° Testuj pamiƒôƒá kontekstu i jako≈õƒá odpowiedzi")
    print("üí° Komendy specjalne:")
    print("   üìú 'historia' - poka≈º historiƒô rozmowy")
    print("   üóëÔ∏è  'wyczy≈õƒá' - wyczy≈õƒá historiƒô")
    print("   üîß 'model' - poka≈º aktualny model")
    print("   üö™ 'quit/exit' - zako≈Ñcz")
    print("-"*60)
    
    # Inicjalizacja
    client = Together()
    conversation_history = []
    start_time = datetime.now()
    message_count = 0
    
    # Model do testowania
    model = "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free"
    print(f"üß† Model: {model}")
    print(f"‚è∞ Start: {start_time.strftime('%H:%M:%S')}")
    print()
    
    while True:
        try:
            # Pobierz wiadomo≈õƒá od u≈ºytkownika
            user_input = input("üë§ Ty: ").strip()
            
            # Komendy specjalne
            if user_input.lower() in ['quit', 'exit', 'bye', 'koniec', 'q']:
                print("\nüëã Dziƒôkujƒô za test! Do zobaczenia!")
                print(f"üìä Statystyki sesji:")
                print(f"   ‚è±Ô∏è  Czas trwania: {datetime.now() - start_time}")
                print(f"   üí¨ Liczba wiadomo≈õci: {message_count}")
                print(f"   üß† Model: {model}")
                break
            
            elif user_input.lower() == 'historia':
                print("\nüìú HISTORIA ROZMOWY:")
                print("-" * 40)
                for i, msg in enumerate(conversation_history, 1):
                    role = "üë§ Ty" if msg["role"] == "user" else "ü§ñ AI"
                    content = msg["content"][:100] + "..." if len(msg["content"]) > 100 else msg["content"]
                    print(f"{i:2d}. {role}: {content}")
                print(f"\nüìä ≈ÅƒÖcznie: {len(conversation_history)} wiadomo≈õci w historii")
                continue
            
            elif user_input.lower() == 'wyczy≈õƒá':
                conversation_history.clear()
                message_count = 0
                print("üóëÔ∏è  Historia wyczyszczona! Zaczynamy od nowa.")
                continue
            
            elif user_input.lower() == 'model':
                print(f"üß† Aktualny model: {model}")
                print(f"üîó API: Together AI")
                print(f"üíæ Historia: {len(conversation_history)} wiadomo≈õci")
                continue
            
            # Pomi≈Ñ puste wiadomo≈õci
            if not user_input:
                continue
            
            # Dodaj wiadomo≈õƒá u≈ºytkownika do historii
            conversation_history.append({"role": "user", "content": user_input})
            message_count += 1
            
            print("ü§ñ AI: ", end="", flush=True)
            
            # Wy≈õlij zapytanie do AI
            response = client.chat.completions.create(
                model=model,
                messages=conversation_history,
                max_tokens=1000,
                temperature=0.7,
                stream=True  # Streaming dla p≈Çynniejszej odpowiedzi
            )
            
            # Zbierz odpowied≈∫ ze streaming
            bot_response = ""
            for chunk in response:
                if chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    print(content, end="", flush=True)
                    bot_response += content
            
            print()  # Nowa linia po odpowiedzi
            
            # Dodaj odpowied≈∫ bota do historii
            conversation_history.append({"role": "assistant", "content": bot_response})
            
            # Ogranicz historiƒô do ostatnich 20 wiadomo≈õci (10 par pytanie-odpowied≈∫)
            if len(conversation_history) > 20:
                # Zachowaj ostatnie 16 wiadomo≈õci + informuj o skr√≥ceniu
                old_count = len(conversation_history)
                conversation_history = conversation_history[-16:]
                print(f"\nüí° Historia skr√≥cona z {old_count} do {len(conversation_history)} wiadomo≈õci")
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Przerwano przez Ctrl+C")
            break
            
        except Exception as e:
            print(f"\n‚ùå B≈ÇƒÖd: {e}")
            print("üîÑ Spr√≥buj ponownie...")
            continue

if __name__ == "__main__":
    # Sprawd≈∫ klucz API
    if not os.getenv('TOGETHER_API_KEY'):
        print("‚ùå Brak klucza TOGETHER_API_KEY w zmiennych ≈õrodowiskowych!")
        print("üí° Ustaw klucz: export TOGETHER_API_KEY='tw√≥j_klucz'")
        exit(1)
    
    main()